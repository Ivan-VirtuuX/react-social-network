{"version":3,"sources":["components/common/FormsControls/FormsControls.module.css","components/common/FormsControls/FormsControls.jsx","utils/validators/validators.js","components/Login/Login.jsx"],"names":["module","exports","FormControl","input","meta","touched","error","children","hasError","className","styles","formControl","Textarea","props","restProps","child","Input","createField","placeholder","name","validators","component","text","validate","required","value","maxLengthCreator","maxLength","length","LoginReduxForm","reduxForm","form","handleSubmit","captchaUrl","onSubmit","type","src","alt","style","formSummaryError","connect","state","auth","isAuth","login","to","formData","email","password","rememberMe","captcha"],"mappings":"+GACAA,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB,0C,qPCGrHC,EAAc,SAAC,GAAkD,EAAhDC,MAAiD,IAAD,IAAzCC,KAAQC,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,MAASC,EAAe,EAAfA,SAChDC,EAAWH,GAAWC,EAC5B,OACE,yBAAKG,UAAWC,IAAOC,YAAc,KAAOH,EAAWE,IAAOJ,MAAQ,KACpE,6BAAMC,GACLC,GAAY,8BAAOF,KAKbM,EAAW,SAACC,GACvB,IAAQV,EAAqCU,EAArCV,MAAuBW,GAAcD,EAA9BT,KAA8BS,EAAxBE,MAArB,YAA6CF,EAA7C,IACA,OACE,kBAACX,EAAgBW,EACf,8CAAcV,EAAWW,MAKlBE,EAAQ,SAACH,GACpB,IAAQV,EAAqCU,EAArCV,MAAuBW,GAAcD,EAA9BT,KAA8BS,EAAxBE,MAArB,YAA6CF,EAA7C,IACA,OACE,kBAACX,EAAgBW,EACf,2CAAWV,EAAWW,MAKfG,EAAc,SACzBC,EACAC,EACAC,EACAC,GAGI,IAFJR,EAEG,uDAFK,GACRS,EACG,uDADI,GAEP,OACE,6BACE,kBAAC,IAAD,eACEJ,YAAaA,EACbC,KAAMA,EACNI,SAAUH,EACVC,UAAWA,GACPR,IAELS,K,iCCjDP,oEAAO,IAAME,EAAW,SAACC,GACvB,IAAIA,EAEJ,MAAO,qBAGIC,EAAmB,SAACC,GAAD,OAAe,SAACF,GAC9C,OAAIA,EAAMG,OAASD,EACX,iBAAN,OAAwBA,EAAxB,iBAEA,K,iCCVJ,+FAqCME,EAAiBC,YAAU,CAC/BC,KAAM,SADeD,EA5BL,SAAC,GAAyC,IAAvCE,EAAsC,EAAtCA,aAAc1B,EAAwB,EAAxBA,MAAO2B,EAAiB,EAAjBA,WACxC,OACE,0BAAMC,SAAUF,GACbf,YAAY,QAAS,QAAS,CAACO,KAAWR,KAC1CC,YAAY,WAAY,WAAY,CAACO,KAAWR,IAAO,CACtDmB,KAAM,aAEPlB,YACC,KACA,aACA,GACAD,IACA,CAAEmB,KAAM,YACR,eAGDF,GAAc,yBAAKG,IAAKH,EAAYI,IAAI,KACxCJ,GACChB,YAAY,qBAAsB,UAAW,CAACO,KAAWR,IAAO,IAEjEV,GAAS,yBAAKG,UAAW6B,IAAMC,kBAAmBjC,GACnD,6BACE,8CA+BOkC,uBALS,SAACC,GAAD,MAAY,CAClCR,WAAYQ,EAAMC,KAAKT,WACvBU,OAAQF,EAAMC,KAAKC,UAGmB,CAAEC,WAA3BJ,EArBD,SAAC3B,GAKb,OAAIA,EAAM8B,OACD,kBAAC,IAAD,CAAUE,GAAI,aAGrB,6BACE,qCACA,kBAAChB,EAAD,CAAgBK,SAVH,SAACY,GAChBjC,EAAM+B,MAAME,EAASC,MAAOD,EAASE,SAAUF,EAASG,WAAYH,EAASI,UASvCjB,WAAYpB,EAAMoB","file":"static/js/7.fe7b0b56.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__2X90n\",\"error\":\"FormsControls_error__1rHA3\",\"formSummaryError\":\"FormsControls_formSummaryError__3RSdE\"};","import React from \"react\";\r\nimport styles from \"./FormsControls.module.css\";\r\nimport { Field } from \"redux-form\";\r\n\r\nconst FormControl = ({ input, meta: { touched, error }, children }) => {\r\n  const hasError = touched && error;\r\n  return (\r\n    <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n      <div>{children}</div>\r\n      {hasError && <span>{error}</span>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const Textarea = (props) => {\r\n  const { input, meta, child, ...restProps } = props;\r\n  return (\r\n    <FormControl {...props}>\r\n      <textarea {...input} {...restProps} />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport const Input = (props) => {\r\n  const { input, meta, child, ...restProps } = props;\r\n  return (\r\n    <FormControl {...props}>\r\n      <input {...input} {...restProps} />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport const createField = (\r\n  placeholder,\r\n  name,\r\n  validators,\r\n  component,\r\n  props = {},\r\n  text = \"\"\r\n) => {\r\n  return (\r\n    <div>\r\n      <Field\r\n        placeholder={placeholder}\r\n        name={name}\r\n        validate={validators}\r\n        component={component}\r\n        {...props}\r\n      />\r\n      {text}\r\n    </div>\r\n  );\r\n};\r\n","export const required = (value) => {\r\n  if (value) return undefined;\r\n\r\n  return \"Field is required\";\r\n};\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n  if (value.length > maxLength) {\r\n    return `Max length is ${maxLength} symbols`;\r\n  } else {\r\n    return undefined;\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { reduxForm } from \"redux-form\";\r\nimport { required } from \"../../utils/validators/validators\";\r\nimport { createField, Input } from \"../common/FormsControls/FormsControls\";\r\nimport { login } from \"../../Redux/auth-reducer\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport style from \"./../common/FormsControls/FormsControls.module.css\";\r\n\r\nconst LoginForm = ({ handleSubmit, error, captchaUrl }) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      {createField(\"Email\", \"email\", [required], Input)}\r\n      {createField(\"Password\", \"password\", [required], Input, {\r\n        type: \"password\",\r\n      })}\r\n      {createField(\r\n        null,\r\n        \"rememberMe\",\r\n        [],\r\n        Input,\r\n        { type: \"checkbox\" },\r\n        \"remember me\"\r\n      )}\r\n\r\n      {captchaUrl && <img src={captchaUrl} alt=\"\" />}\r\n      {captchaUrl &&\r\n        createField(\"Symbols from image\", \"captcha\", [required], Input, {})}\r\n\r\n      {error && <div className={style.formSummaryError}>{error}</div>}\r\n      <div>\r\n        <button>Login</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst LoginReduxForm = reduxForm({\r\n  form: \"login\",\r\n})(LoginForm);\r\n\r\nconst Login = (props) => {\r\n  const onSubmit = (formData) => {\r\n    props.login(formData.email, formData.password, formData.rememberMe, formData.captcha);\r\n  };\r\n\r\n  if (props.isAuth) {\r\n    return <Redirect to={\"/profile\"} />;\r\n  }\r\n  return (\r\n    <div>\r\n      <h1>Login</h1>\r\n      <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl} />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  captchaUrl: state.auth.captchaUrl,\r\n  isAuth: state.auth.isAuth,\r\n});\r\n\r\nexport default connect(mapStateToProps, { login })(Login);\r\n"],"sourceRoot":""}